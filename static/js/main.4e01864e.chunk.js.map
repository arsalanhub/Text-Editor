{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","class","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","className","mode","textColour","href","title","id","onClick","toggleMode","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","App","setMode","setTextColour","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAeeA,MAbf,SAAeC,GAKX,OAEIA,EAAMC,OAAS,sBAAKC,MAAK,sBAAiBF,EAAMC,MAAME,KAA7B,gCAAiEC,KAAK,QAAhF,UACf,iCAPe,SAACC,GAChB,IAAMC,EAAQD,EAAKE,cACnB,OAAOD,EAAME,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,GAK1CC,CAAWX,EAAMC,MAAME,QADjB,KACmCH,EAAMC,MAAMW,QCPvD,SAASC,EAAOb,GAU7B,OACE,qBACEc,UAAS,yCAAoCd,EAAMe,KAA1C,eAAqDf,EAAMe,MADtE,SAGE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAS,4BAAuBd,EAAMgB,YAAcC,KAAK,IAA5D,SACGjB,EAAMkB,QAET,wBACEJ,UAAU,iBACVX,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMW,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAS,+BAA0Bd,EAAMgB,YAAc,eAAa,OAAOC,KAAK,IAAnF,sBAgBJ,sBAAKH,UAAS,sCAAiCd,EAAMgB,YAArD,UACE,wBAAQb,KAAK,SAASD,MAAM,uBAAuBkB,QA1CzC,WAClBpB,EAAMqB,WAAW,YAyCT,qBAGA,wBACElB,KAAK,SACLD,MAAM,qBACNkB,QAnDM,WAChBpB,EAAMqB,WAAW,UA+CT,mBAOA,wBAAQlB,KAAK,SAASD,MAAM,eAAekB,QA1DpC,WACfpB,EAAMqB,WAAW,SAyDT,6BC5DG,SAASC,EAAStB,GAC/B,IA4BA,EAAwBuB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,qCACE,sBAAKX,UAAU,YAAYY,MAAO,CAACC,MAAO3B,EAAMgB,YAAhD,UACE,6BAAKhB,EAAM4B,UACX,qBAAKd,UAAU,OAAf,SACE,0BACEA,UAAS,4BAAsC,SAAfd,EAAMe,KAAgB,QAAQ,QAC9Dc,MAAOL,EACPM,SApBa,SAACC,GACtBN,EAAQM,EAAMC,OAAOH,QAoBbH,MAAO,CAACO,gBAAgC,SAAfjC,EAAMe,KAAgB,OAAO,SACtDI,GAAG,QACHe,KAAK,QAGT,wBAAQpB,UAAU,uBAAuBM,QA3CzB,WACpB,IAAIe,EAAUX,EAAKf,cACnBgB,EAAQU,GACRnC,EAAMoC,UAAU,0BAA2B,YAwCvC,mCAGA,wBAAQtB,UAAU,uBAAuBM,QAxCxB,WACrB,IAAIe,EAAUX,EAAKjB,cACnBkB,EAAQU,GACRnC,EAAMoC,UAAU,0BAA2B,YAqCvC,mCAGA,wBAAQtB,UAAU,uBAAuBM,QArC3B,WAChBK,EAAQ,IACRzB,EAAMoC,UAAU,eAAgB,YAmC9B,mBAGA,wBAAQtB,UAAU,uBAAuBM,QA/B5B,WAChB,IAAII,EAAOa,SAASC,eAAe,SACnCd,EAAKe,SACLC,UAAUC,UAAUC,UAAUlB,EAAKK,OACnC7B,EAAMoC,UAAU,2BAA4B,YA2BzC,qBAIF,sBAAKtB,UAAU,iBAAiBY,MAAO,CAACC,MAAO3B,EAAMgB,YAArD,UACI,mDACA,8BAAIQ,EAAKmB,MAAM,KAAKC,OAApB,WAAoCpB,EAAKoB,OAAzC,iBACA,8BAAI,KAAMpB,EAAKmB,MAAM,KAAKC,OAA1B,mBACA,yCACA,4BAAIpB,EAAKoB,OAAO,EAAEpB,EAAK,sDD0BjCX,EAAOgC,aAAe,CACpB3B,MAAO,kBElCM4B,MAlDf,WACE,MAAwBvB,mBAAS,SAAjC,mBAAOR,EAAP,KAAagC,EAAb,KACA,EAAoCxB,mBAAS,QAA7C,mBAAOP,EAAP,KAAmBgC,EAAnB,KACA,EAA0BzB,mBAAS,MAAnC,mBAAOtB,EAAP,KAAcgD,EAAd,KAEMb,EAAY,SAACc,EAAS/C,GAC1B8C,EAAS,CACPrC,IAAKsC,EACL/C,KAAMA,IAERgD,YAAW,WACTF,EAAS,QACR,MAqBL,OACE,qCACE,cAACpC,EAAD,CACEK,MAAM,cACNH,KAAMA,EACNM,WAvBa,SAACN,GACL,SAATA,GACFgC,EAAQhC,GACRiC,EAAc,SACdX,SAASe,KAAK1B,MAAMO,gBAAkB,OACtCG,EAAU,6BAA8B,YACtB,UAATrB,GACTgC,EAAQhC,GACRiC,EAAc,QACdX,SAASe,KAAK1B,MAAMO,gBAAkB,QACtCG,EAAU,8BAA+B,YACvB,YAATrB,IACTgC,EAAQ,WACRC,EAAc,SACdX,SAASe,KAAK1B,MAAMO,gBAAkB,OACtCG,EAAU,gCAAiC,aASzCpB,WAAYA,IAEd,cAAC,EAAD,CAAOf,MAAOA,IACd,qBAAKa,UAAU,iBAAf,SAEE,cAACQ,EAAD,CAAUM,QAAQ,mCAAmCb,KAAMA,EAAMqB,UAAWA,UCvCrEiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1Be,K","file":"static/js/main.4e01864e.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Alert(props) {\n    const capitalize = (word) => {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        // Below statement is equivalent to. if (props. alert != NULL)\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n        </div>\n    );\n}\n\nexport default Alert","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Navbar(props) {\n  const darkMode = () => {\n    props.toggleMode(\"dark\");\n  };\n  const lightMode = () => {\n    props.toggleMode(\"light\");\n  };\n  const primaryMode = () => {\n    props.toggleMode(\"primary\")\n  }\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className={`navbar-brand text-${props.textColour}`} href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className={`nav-link active text-${props.textColour}`} aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n          </ul>\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-primary\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n          <div className={`form-check form-switch text-${props.textColour}`}>\n            <button type=\"button\" class=\"btn btn-primary mx-3\" onClick={primaryMode}>\n              Primary\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn btn-light mx-3\"\n              onClick={lightMode}\n            >\n              Light\n            </button>\n            <button type=\"button\" class=\"btn btn-dark\" onClick={darkMode}>\n              Dark\n            </button>\n            {/* <input\n              className=\"form-check-input\"\n              onClick={props.toggleMode}\n              type=\"checkbox\"\n              role=\"switch\"\n              id=\"flexSwitchCheckDefault\"\n            /> */}\n            {/* <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\n              {props.textMode}\n            </label> */}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\n// Prop types defines property of props which is passed\n// In this case props.title will always be string type\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\n// this function will automatically set value of title\n// if nothing is passed in props\nNavbar.defaultProps = {\n  title: \"Set title here\",\n};\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const handleUpClick = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to Upper Case\", \"success\")\n  };\n\n  const handleLowClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to Lower Case\", \"success\")\n  };\n\n  const handleClear = () => {\n      setText(\"\");\n      props.showAlert(\"Cleared Text\", \"success\")\n  };\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n  };\n\n  const handleCopy = () => {\n     var text = document.getElementById(\"myBox\");\n     text.select();\n     navigator.clipboard.writeText(text.value);\n     props.showAlert(\"Text copied to clipboard\", \"success\")\n  }\n\n  const [text, setText] = useState(\"\");\n  return (\n    <>\n      <div className=\"container\" style={{color: props.textColour}}>\n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className={`form-control text-${props.mode === 'dark'?'light':'dark'}`}\n            value={text}\n            onChange={handleOnChange}\n            style={{backgroundColor: props.mode === 'dark'?'gray':'white'}}\n            id=\"myBox\"\n            rows=\"8\"\n          ></textarea>\n        </div>\n        <button className=\"btn btn-primary mx-3\" onClick={handleUpClick}>\n          Convert to Upper Case\n        </button>\n        <button className=\"btn btn-primary mx-3\" onClick={handleLowClick}>\n          Convert to Lower Case\n        </button>\n        <button className=\"btn btn-primary mx-3\" onClick={handleClear}>\n          Clear\n        </button>\n        <button className=\"btn btn-primary mx-3\" onClick={handleCopy}>\n          Copy\n        </button>\n      </div>\n      <div className=\"container my-3\" style={{color: props.textColour}}>\n          <h2>Your text summary</h2>\n          <p>{text.split(\" \").length} words, {text.length} characters</p> \n          <p>{0.008*text.split(\" \").length} Minutes Read</p>  \n          <h2>Preview</h2>\n          <p>{text.length>0?text:\"Enter something in text box to preview here\"}</p>\n      </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [textColour, setTextColour] = useState(\"dark\")\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n\n  const toggleMode = (mode) => {\n    if (mode === 'dark') {\n      setMode(mode);\n      setTextColour(\"light\");\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark mode has been enabled\", \"success\")\n    } else if (mode === 'light') {\n      setMode(mode);\n      setTextColour(\"dark\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\")\n    } else if (mode === 'primary') {\n      setMode(\"primary\");\n      setTextColour(\"light\");\n      document.body.style.backgroundColor = 'pink';\n      showAlert(\"Primary mode has been enabled\", \"success\")\n    }\n  };\n  return (\n    <>\n      <Navbar\n        title=\"Text Editor\"\n        mode={mode}\n        toggleMode={toggleMode}\n        textColour={textColour}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <About />  */}\n        <TextForm heading=\"Enter your text to analyze below\" mode={mode} showAlert={showAlert}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}